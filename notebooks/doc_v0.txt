CELL 1 ============================================================================================================================
# Overview

**Resume:**

PanGaia simplifies the access, exploration, and clustering analysis of the Gaia DR2 [catalogue](https://gea.esac.esa.int/archive/).
Its main target audience is the community of astromers working in the topic of star formation who are *familiar* with the Gaia archive.


**Main steps:**
1. The code asks the user to provide the coordinates and constraints to perform an [ADQL](http://www.ivoa.net/documents/ADQL/2.0) cone-search (e.g. [link](https://gea.esac.esa.int/archive-help/adql/examples/index.html)) in the Gaia archive. If a control sample is provided PanGaia will compute its average R.A. ($\alpha$) and declination ($\delta$) to center the cone search. Once the coordinates and constraints are set the code will execute the ADQL query using the [astroquery.gaia](https://astroquery.readthedocs.io/en/latest/gaia/gaia.html) package, and download a .vot table with the data to the current directory. PanGaia will add several columns to the table like e.g. the distance (computed as the inverse of the parallax, $d = 1/\varpi$).


2. The downloaded dataset can be visualised with [pyESASky](https://www.cosmos.esa.int/web/esdc/pyesasky), and interactively inspected with the [plotly](https://plot.ly/python/) Python library.


3. Clusters (overdensities) in the 5-dimensional space defined by the 3 Cartesian dimensions (X,Y, and Z in Galactic coordinates), and the 2 proper motions $\mu_{\alpha}^*$ and $\mu_{\delta}$) of the downloaded dataset are identified using a clustering algorithm. The current version of the notebook uses the HDBSCAN algorithm (an unsupervised Machine Learning, density-based, clustering algorithm) as implemented in [here](https://hdbscan.readthedocs.io/en/latest/).


**Products:**

The main products of PanGaia are 1) the data sample downloaded from the Gaia archive, and 2) the clusters identified by the HDSBCAN algorithm.
Additionally the code creates a set of PDF files illustrating the intermediate steps of the analysis.


**Notes:**

TbD


This notebook was written by Héctor Cánovas (hcanovas@sciops.esa.int), and is licensed under a MIT License
===================================================================================================================================


CELL 2 ============================================================================================================================
# Customize Pangaia:

The notebook is divided into 4 separated steps or blocks, each of which is indepent from the others. To decide how to run PanGaia set the steps to ```True/False``` below.
===================================================================================================================================



CELL 3 ============================================================================================================================
# 1.- Load Control Sample

The control sample is loaded if ```step_1 = True``` below. There are a number of variables that can be easily set by the user:
* Line  3: Set the control sample color and label.
* Line  4: Set the directory from where the control samples are read. The code searches for the .vot tables stored in this directory and asks the user to choose one of them. Alternatively, the control sample can be specified as e.g., ```control.read_catalogue('../samples_control/sample_control_IC_348.vot')```
* Line  5: Set the number of control sample rows to be displayed (starting from the first row).
* Line 10: Set the dimensions to be displayed in the plot and in the histogram by changing the ```col_hist, col_x, and col_y``` arguments.
===================================================================================================================================



CELL 4 ============================================================================================================================
# 2.- Run pyESASky
pyESASKy is a python widget that opens an [ESASky](https://sky.esa.int/?target=273.2303166666667%2068.36347222222221&hips=DSS2%20color&fov=0.09993670884473815&cooframe=J2000&sci=true&lang=en) window locally. This widget will open if ```step_2 = True``` in Cell #2, allowing to visualise the control and/or queried sample. By default, the control sample is represented as magenta squares (following the color set in Cell #5, line 3) on top of a RGB background mid-infrared image. Different backgrounds can be set by clicking in the "manage skies" buttom of the widget (top left). If there is no control sample the widget will open displaying a randomn astronomy image.
===================================================================================================================================





CELL 5 ============================================================================================================================
# 3.- Construct Data Sample

The cell below executes an [ADQL](http://www.ivoa.net/documents/ADQL/2.0) cone-search query in the Gaia archive. If the Control sample has been loaded before, its average $\alpha$ and $\delta$, its maximum and minimum $\varpi$, and its projected radius on-sky will be displayed to help to define the query. The code will ask for a name that will be used to save the output of the query and it will serve as the rootname for all the data products created by this notebook. Afterwards PanGaia will define the central coordinates of the query. If the control sample has been loaded then its average coordinates [$\alpha, \delta$] will be used to center the cone search. Otherwise, the code will ask the user to input them. In any of the cases the code will additionally ask for the cone-search radius and for a minimum/maximum parallax range to constrain the query. To download a sample that encompases the entire control sample the query radius shoud be larger than that of the control sample, and the parallax range should be set accordingly. Additionally, PanGaia includes three quality constraints (line 11 in the Cell below): 

```sample_queried.run_cone_search(quality_par_SN  = '10', quality_par_vis = '7',quality_par_ruwe = '1.40')```

The first argument set the minimum signal to noise (S/N) of the parallax. To convert from parallax to distance using $d = 1./\varpi$ this parameter must be $\ge 10$ [(Bailer-Jones (2015))](https://ui.adsabs.harvard.edu/abs/2015PASP..127..994B/abstract). The second argument indicates the minimum amount of [visibility periods](https://gea.esac.esa.int/archive/documentation/GDR2/Gaia_archive/chap_datamodel/sec_dm_main_tables/ssec_dm_gaia_source.html)
used to compute the astrometric solution for each source. The third argument indicates the maximun value of the [RUWE](https://gea.esac.esa.int/archive/documentation/GDR2/Gaia_archive/chap_datamodel/sec_dm_main_tables/ssec_dm_ruwe.html)
parameter.

Once the coordinates and constraints are set the code executes the ADQL query using the [astroquery.gaia](https://astroquery.readthedocs.io/en/latest/gaia/gaia.html) package, downloading a .vot table with the query output to the current directory. Information regarding the query, its status, and the general properties of the downloaded sample will be displayed. As it happens when loading the control sample, the user can associated a color and a label to this dataset. By defaul, the label is the name set at the beggining of the query, and the color is set to grey.
===================================================================================================================================





CELL 6 ============================================================================================================================
# Visual Inspection


The cell below allows to interactively inspect the downloaded dataset using the [plotly](https://plot.ly/python/) Python library. PanGaia will open 3 dynamical pannels, with the downloaded sample represented as grey semi-transparent circles, and they control sample as magenta (by default) circles.
===================================================================================================================================